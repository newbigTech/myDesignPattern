@startuml

interface FixShardedResourceOperation<R> {
    <T> T execute(String shardedKey, ResourceCallback<R, T> action)
}

interface ResourcesOperation<R, I> {
    <T> AnyResourceCallbackStatus<T> executeAny(AnyResourceCallback<R, T> action);
    <T> Map<I, T> <font color=red>executeAll</font>(ResourcesCallback<R, T> action);
    <T> T execute(ResourceCallback<R, T> action, String host, int port);

}

abstract FixedShardedPoolTemplate{
    private FixedShardedPool<R, P, I> fixedShardedPool;
    private ResourcesTemplate<R, P, I> resourcesTemplate;
    public <T> AnyResourceCallbackStatus<T> executeAny(AnyResourceCallback<R, T> action);
    public <T> T execute(String shardedKey, ResourceCallback<R, T> action);
}


abstract FixedShardedJedisPoolTemplate{

}

class FixedShardedJedisIntelliPoolTemplate {

}


interface DynamicPool {
    void changePool(List<T> poolsInfos, GenericObjectPoolConfig poolConfig);
    List<T> toPoolInfos(String hosts, GenericObjectPoolConfig poolConfig);
}

interface Pools <R extends AutoCloseable, P extends Pool<R>, I>{
    List<P> getAllPool();
    I getPoolInfo(R resource);
    P getPool(String host, int port);
    void close();
    boolean isClosed();
}

abstract class FixedShardedPool{
    R getResource(String shardedKey);
}
Pools <|..FixedShardedPool
abstract class FixedShardedJedisPool{

}

class FixedShardedIntelliJedisPool {
}
FixedShardedPool<|--FixedShardedJedisPool


class FixedShardedIntelliJedisDynamicPool {
    public FixedShardedIntelliJedisDynamicPool(String hosts, GenericObjectPoolConfig poolConfig)
}

interface ResourcesOperation<R, I> {
    public <T> AnyResourceCallbackStatus<T> executeAny(AnyResourceCallback<R, T> action);
    public <T> Map<I, T> executeAll(ResourcesCallback<R, T> action);
    public <T> T execute(ResourceCallback<R, T> action, String host, int port);
}

class ResourcesTemplate{

}

class FixedShardedIntelliJedisPoolInfo{
List<FixedShardedIntelliJedisPoolInfo> toFixedShardedIntelliJedisPoolInfos(hosts,\n GenericObjectPoolConfig poolConfig)
}

class Sharded<R, S extends ShardInfo<R>> {
    private final Hashing algo;
    private TreeMap<Long, S> nodes;
    R getShard(String key);
    S getShardInfo(String key);
    S getShardInfo(byte[] key);
}

ResourcesOperation <|.. ResourcesTemplate

FixShardedResourceOperation <|..FixedShardedPoolTemplate
ResourcesOperation <|..FixedShardedPoolTemplate

FixedShardedPoolTemplate<|--FixedShardedJedisPoolTemplate

FixedShardedJedisPoolTemplate<|--FixedShardedJedisIntelliPoolTemplate

FixedShardedPoolTemplate --> FixedShardedIntelliJedisDynamicPool
FixedShardedJedisPool<|--FixedShardedIntelliJedisPool
FixedShardedIntelliJedisPool<|--FixedShardedIntelliJedisDynamicPool
DynamicPool<|..FixedShardedIntelliJedisDynamicPool

FixedShardedPoolTemplate --->ResourcesTemplate
FixedShardedIntelliJedisDynamicPool->FixedShardedIntelliJedisPoolInfo

ResourcesTemplate -->FixedShardedIntelliJedisDynamicPool

FixedShardedPool->Sharded
@enduml