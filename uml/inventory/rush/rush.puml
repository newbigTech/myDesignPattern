@startuml

interface LockTemplate {
    <F, T> LockResult<T> lock(String key, int expire, Function<F, T> executor, F param)
}
interface Function<F, T> {
    T apply(F input);
}
abstract class AbstractLockTemplate{
    public <F, T> LockResult<T> lock(String lockKey, int expire, Function<F, T> executor,F params)
    protected abstract boolean doAcquireLock(String lockKey,String lockValue,Integer expireSec);
    protected abstract void doReleaseLock(String lockKey,String lockValue);
    protected String getLockValue();
}

class RushRedisLockTemplate {
    protected boolean doAcquireLock(String lockKey,String lockValue,Integer expireSec)
    protected void doReleaseLock(String lockKey,String lockValue)
}

LockTemplate <|.. AbstractLockTemplate
AbstractLockTemplate <|-- RushRedisLockTemplate
AbstractLockTemplate ->Function



@enduml