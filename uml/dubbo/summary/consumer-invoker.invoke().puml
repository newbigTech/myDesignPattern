@startuml
participant Client
participant InvokerInvocationHandler

Client -> InvokerInvocationHandler:proxyObj.invoke()
InvokerInvocationHandler -> MockClusterInvoker:invoke(invocation)
MockClusterInvoker -> AbstractClusterInvoker:invoke(invocation)
AbstractClusterInvoker -> RegistryDirectory:list(invocation)获取\n所有可用Invokers
activate AbstractClusterInvoker
RegistryDirectory -> MockInvokersSelector:根据路由规则进一步\n过滤不匹配的invokers
note right
MockInvokersSelector实现了Router接口
end note
deactivate AbstractClusterInvoker
AbstractClusterInvoker -> FailoverClusterInvoker:doInvoke(Invocation invocation, List<Invoker<T>> invokers, LoadBalance loadbalance)
FailoverClusterInvoker -> loadBalance:根据负载均衡策略选出\n需要执行的invoker
note right
默认使用随机负载均衡
当节点数为2时蜕变为轮询策略
end note
FailoverClusterInvoker -> AbstractInvoker:invoker.invoke(invocation)
note left
经过一系列Filter、Listener
end note
AbstractInvoker -> DubboInvoker:doInvoke(invocation)\n进行远程调用
@enduml