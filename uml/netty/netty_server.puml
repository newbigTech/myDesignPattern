@startuml
participant "server" as server
participant "ServerBootstrap" as ServerBootstrap
participant "AbstractBootstrap" as AbstractBootstrap
participant "AbstractChannel" as AbstractChannel
participant "DefaultChannelPipeline" as DefaultChannelPipeline
participant "AbstractNioChannel" as AbstractNioChannel
participant "NioServerSocketChannel" as NioServerSocketChannel
server->AbstractBootstrap:bind(port)
AbstractBootstrap->AbstractBootstrap:bind(localAddress)
AbstractBootstrap->AbstractBootstrap:doBind(localAddress)
AbstractBootstrap->AbstractBootstrap:1.initAndRegister()
alt initAndRegister()
AbstractBootstrap->ServerBootstrap:createChannel()
AbstractBootstrap->ServerBootstrap:init(channel)
ServerBootstrap->ServerBootstrap:channel.pipeline()\n.addLast(new ServerBootstrapAcceptor(\ncurrentChildHandler))
AbstractBootstrap->AbstractChannel:channel.unsafe().register(channelPromise)
AbstractChannel->AbstractChannel:register0(channelPromise)
AbstractChannel->AbstractNioChannel:doRegister()(channelPromise)
AbstractNioChannel->AbstractNioChannel:javaChannel().register(eventLoop().selector, 0, this)
AbstractChannel->DefaultChannelPipeline:pipeline.fireChannelRegistered()
    alt isActive()
        AbstractChannel->DefaultChannelPipeline:pipeline.fireChannelActive()
    end
end

AbstractBootstrap->AbstractBootstrap:2.doBind0()
alt doBind0()
    AbstractBootstrap->AbstractChannel:channel.bind(localAddress, promise)
    AbstractChannel->DefaultChannelPipeline:pipeline.bind()
    DefaultChannelPipeline->DefaultChannelPipeline:tail.bind()
    DefaultChannelPipeline->DefaultChannelPipeline:head.bind()
    DefaultChannelPipeline->AbstractChannel:unsafe.bind()
    AbstractChannel->NioServerSocketChannel:doBind()
    NioServerSocketChannel->NioServerSocketChannel:javaChannel().socket().bind()
    AbstractChannel -> DefaultChannelPipeline:pipeline()\n.fireChannelActive()
      alt fireChannelActive()
          DefaultChannelPipeline -> DefaultChannelPipeline:head.fireChannelActive()
          alt channel.config().isAutoRead()
          DefaultChannelPipeline -> AbstractChannel:channel.read()
          AbstractChannel -> DefaultChannelPipeline:pipeline.read()
          DefaultChannelPipeline -> DefaultChannelPipeline:tail.read()
          DefaultChannelPipeline -> DefaultChannelPipeline:head.read()
          DefaultChannelPipeline -> AbstractChannel:unsafe.beginRead()
          AbstractChannel -> AbstractChannel:doBeginRead()
          AbstractChannel -> AbstractNioChannel:selectionKey\n.interestOps(interestOps | readInterestOp);
          end
      end
end
@enduml